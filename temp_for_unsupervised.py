# -*- coding: utf-8 -*-
"""temp for unsupervised

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1b_YCz-4xkPaw-80Swx-Mad7tQhBgLjZE
"""

import pandas as pd
import numpy as np

from sklearn.svm import OneClassSVM
from sklearn.mixture import GaussianMixture
from sklearn.metrics import mutual_info_score
from sklearn.cluster import KMeans
import matplotlib.pyplot as plt

plt.rcParams['font.family'] = 'serif'
plt.rcParams['font.serif'] = ['Times New Roman'] + plt.rcParams['font.serif']

from google.colab import drive
drive.mount('/content/drive')

all_data = pd.read_csv(open('drive/MyDrive/USCensus1990.data.csv', 'r'))
data = all_data.drop(columns = ['caseid', 'dAge', 'dHispanic', 'iYearwrk', 'iSex'])
external_vars_list = ['dAge', 'dHispanic', 'iYearwrk', 'iSex']
external_variables = all_data[external_vars_list]


sample_size = 20000 
data_sample = data.sample(sample_size)

def hist_plot(scores, bins_num, algo_name):
  _, _, _ = plt.hist(scores, bins=bins_num)

  plt.xlabel('Scores')
  plt.ylabel('Frequency')
  if algo_name == 'gmm':
    plt.yscale('log')
  plt.savefig(f'{algo_name}_scores_histogram.pdf')
  plt.show()

def show_anomalies(scores, anomaly_thre, algo_name):
  order_index = np.argsort(scores, axis = 0)
  indexes_max = order_index[-anomaly_thre:]
  indexes_min = order_index[:anomaly_thre]

  values_min = scores[indexes_min]
  values_max = scores[indexes_max]

  print(values_min)
  print(values_max)

  plt.scatter(indexes_min, values_min, color='m', s=0.9)
  plt.scatter(indexes_max, values_max, color='b', s=0.9)
  # plt.savefig(f'{algo_name}_min_max_scores.pdf')
  plt.show()

## OneClassSVM
clf = OneClassSVM(gamma='auto')
clf.fit(data_sample)
score_1classSVM = clf.score_samples(data)
score_1classSVM_binary = clf.predict(data)

## GMM
gm = GaussianMixture(n_components=5, covariance_type='full', random_state=0)
gm.fit(data_sample)
score_gm = gm.score_samples(data)

## K-means
kmeans = KMeans(n_clusters=5)
kmeans.fit(data_sample)
score_kmeans = kmeans.transform(data).min(axis=1)

## arg1: score_1classSVM/score_gm/score_kmeans
## arg3: 'OneClassSVM'/'GMM'/'Kmeans'
hist_plot(score_1classSVM, bins_num=200, algo_name='OneClassSVM')

## arg1: score_1classSVM/score_gm/score_kmeans
## arg3: 'OneClassSVM'/'GMM'/'Kmeans'
show_anomalies(score_kmeans, anomaly_thre=100, algo_name='kmeans')

#### Getting mutual information between anomalies and external variable

algo_names = ['oneClassSVM', 'GMM', 'Kmeans']
scores = [score_1classSVM, score_gm, score_kmeans]
thresholds = [[0.164, 10000000], [-500280.81, 100000000], [0.0, 47.95]]  # ~100 outliears
bias = [0, 0.3, 0.6]
colors = ['dodgerblue', 'm', 'g']

x_pos = np.arange(len(external_vars_list))
fig, ax = plt.subplots()

for algo_name, s, thre, b, c in zip(algo_names, scores, thresholds, bias, colors):
  min_thre = thre[0]
  max_thre = thre[1]
  scores_labels = np.where((s < min_thre) | (s > max_thre), 0, 1)  # anomalies: 0, otherwise: 1

  MI = {}
  for var in external_vars_list:
    mutual_info = mutual_info_score(external_variables[var].to_numpy(), scores_labels)
    MI[var] = mutual_info
    print(f'Algo: {algo_name} External Variable: {var} Mutual Information: {mutual_info}')
  ax.bar(x_pos + b, list(MI.values()), width=0.3, align='center', alpha=0.7, color=c)

ax.set_ylabel('MI')
ax.set_xticks(x_pos)
ax.set_xticklabels(external_vars_list)
ax.yaxis.grid(True)
plt.tight_layout()
plt.legend(['OneClassSVM', 'GMM', 'K-means'])
plt.savefig('MI_anomaly_with_external.pdf')
plt.show()